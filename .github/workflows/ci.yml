name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, prod ]
  pull_request:
    branches: [ main, develop, prod ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: portfolio_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run backend tests
        run: ./mvnw clean test
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/portfolio_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test

      - name: Generate JaCoCo coverage report
        run: ./mvnw jacoco:report

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Check coverage threshold
        run: ./mvnw jacoco:check
        continue-on-error: true

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: portfolio-spring-jar
          path: target/*.jar

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Compile code
        run: ./mvnw clean compile -DskipTests

      - name: Run enforcer plugin
        run: ./mvnw enforcer:enforce
        continue-on-error: true

  # Security Scanning with Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3

  # Security Audit
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Maven dependency check
        run: ./mvnw dependency:tree
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: ./mvnw dependency:analyze
        continue-on-error: true

  # Deploy to Staging (develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, code-quality, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: portfolio-spring-jar
          path: target/

      - name: Deploy to Render staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual Render deployment command
          # Example: curl -X POST https://api.render.com/deploy/...
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}

  # Deploy to Production (main/prod branch with approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, code-quality, security-scan]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod') && github.event_name == 'push'
    environment:
      name: production
      url: https://portfolio-spring.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: portfolio-spring-jar
          path: target/

      - name: Deploy to Render production
        run: |
          echo "Deploying to production environment..."
          # Add actual Render deployment command
          # Example: curl -X POST https://api.render.com/deploy/...
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_PROD_DEPLOY_HOOK }}

      - name: Notify deployment success
        run: |
          echo "âœ… Production deployment successful!"
          # Add notification (Slack, email, etc.)
