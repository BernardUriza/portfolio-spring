package com.portfolio.adapter.in.rest.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.portfolio.exception.ErrorCode;

import java.time.Instant;
import java.util.Map;

/**
 * RFC 7807 Problem Details for HTTP APIs
 * Standard format for machine-readable error responses
 *
 * Specification: https://datatracker.ietf.org/doc/html/rfc7807
 *
 * Example JSON:
 * {
 *   "type": "https://api.bernarduriza.com/problems/validation-error",
 *   "title": "Input validation failed",
 *   "status": 400,
 *   "detail": "The 'email' field must be a valid email address",
 *   "instance": "/api/contact",
 *   "errorCode": "validation_field_invalid",
 *   "retryable": true,
 *   "timestamp": "2025-10-28T05:00:00Z",
 *   "additionalInfo": {
 *     "field": "email",
 *     "providedValue": "invalid-email"
 *   }
 * }
 *
 * Created as part of API-001: RFC 7807 Error Responses
 * Aligns with Catalytic Architecture principle of Transparency (trazabilidad)
 *
 * @author Bernard Uriza Orozco
 * @since 2025-10-28
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ProblemDetailDto {

    /**
     * URI reference identifying the problem type
     * RFC 7807: "A URI reference that identifies the problem type"
     */
    private String type;

    /**
     * Short, human-readable summary
     * RFC 7807: "A short, human-readable summary of the problem type"
     */
    private String title;

    /**
     * HTTP status code
     * RFC 7807: "The HTTP status code generated by the origin server"
     */
    private int status;

    /**
     * Detailed explanation specific to this occurrence
     * RFC 7807: "A human-readable explanation specific to this occurrence"
     */
    private String detail;

    /**
     * URI reference to this specific occurrence
     * RFC 7807: "A URI reference that identifies the specific occurrence"
     */
    private String instance;

    /**
     * Machine-readable error code for client logic
     * Extension: Not in RFC 7807 spec, but widely adopted
     */
    private String errorCode;

    /**
     * Whether the client should retry the request
     * Extension: Helps clients implement exponential backoff
     */
    private Boolean retryable;

    /**
     * ISO 8601 timestamp of error occurrence
     * Extension: Helps with debugging and log correlation
     */
    private Instant timestamp;

    /**
     * Additional context-specific information
     * RFC 7807: "Members can be added to the problem details"
     */
    private Map<String, Object> additionalInfo;

    // Constructors

    public ProblemDetailDto() {
        this.timestamp = Instant.now();
    }

    public static Builder builder() {
        return new Builder();
    }

    // Builder Pattern

    public static class Builder {
        private final ProblemDetailDto problem = new ProblemDetailDto();

        public Builder type(String type) {
            problem.type = type;
            return this;
        }

        public Builder title(String title) {
            problem.title = title;
            return this;
        }

        public Builder status(int status) {
            problem.status = status;
            return this;
        }

        public Builder detail(String detail) {
            problem.detail = detail;
            return this;
        }

        public Builder instance(String instance) {
            problem.instance = instance;
            return this;
        }

        public Builder errorCode(ErrorCode errorCode) {
            problem.errorCode = errorCode.getCode();
            problem.retryable = errorCode.isRetryable();
            if (problem.title == null) {
                problem.title = errorCode.getDescription();
            }
            return this;
        }

        public Builder errorCode(String errorCode) {
            problem.errorCode = errorCode;
            return this;
        }

        public Builder retryable(boolean retryable) {
            problem.retryable = retryable;
            return this;
        }

        public Builder timestamp(Instant timestamp) {
            problem.timestamp = timestamp;
            return this;
        }

        public Builder additionalInfo(Map<String, Object> additionalInfo) {
            problem.additionalInfo = additionalInfo;
            return this;
        }

        public Builder additionalInfo(String key, Object value) {
            if (problem.additionalInfo == null) {
                problem.additionalInfo = new java.util.HashMap<>();
            }
            problem.additionalInfo.put(key, value);
            return this;
        }

        public ProblemDetailDto build() {
            // Set default type if not provided
            if (problem.type == null) {
                problem.type = "https://api.bernarduriza.com/problems/" +
                    (problem.errorCode != null ? problem.errorCode : "error");
            }
            return problem;
        }
    }

    // Getters and Setters

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public Boolean getRetryable() {
        return retryable;
    }

    public void setRetryable(Boolean retryable) {
        this.retryable = retryable;
    }

    public Instant getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Instant timestamp) {
        this.timestamp = timestamp;
    }

    public Map<String, Object> getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(Map<String, Object> additionalInfo) {
        this.additionalInfo = additionalInfo;
    }
}
