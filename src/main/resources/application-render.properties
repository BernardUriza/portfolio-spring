# Server Configuration
server.port=${SERVER_PORT:${PORT:8080}}

# Datasource: tomar directamente lo que exporta el entrypoint
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Pool razonable para Render free tier
spring.datasource.hikari.maximum-pool-size=4
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.initialization-fail-timeout=0

# JPA/Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.show-sql=false
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=never
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Health Monitoring
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always

# Mail Configuration
spring.mail.host=${MAIL_HOST:localhost}
spring.mail.port=${MAIL_PORT:1025}
app.mail.from=${MAIL_FROM:noreply@portfolio.com}
app.mail.to=${MAIL_TO:contact@portfolio.com}

# CORS Configuration for Production
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://bernarduriza.com,https://portfolio-spring-gmat.onrender.com,https://portfolio-frontend.onrender.com,https://bernardorozco.com,https://www.bernardorozco.com}

# Logging Configuration (less verbose for production)
logging.level.root=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN
logging.level.com.portfolio=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId:-}] %logger{36} - %msg%n

# Scheduling
spring.task.scheduling.pool.size=2

# GitHub API Configuration
github.username=${GITHUB_USERNAME:BernardUriza}
github.token=${GITHUB_TOKEN:}

# Anthropic Claude API Configuration
anthropic.api.key=${ANTHROPIC_API_KEY:}
anthropic.api.url=${ANTHROPIC_API_URL:https://api.anthropic.com/v1/messages}

# Admin Security Configuration (relaxed for Render)
portfolio.admin.token=${ADMIN_TOKEN:${PORTFOLIO_ADMIN_TOKEN:}}
portfolio.admin.security.enabled=${ADMIN_SECURITY_ENABLED:${APP_ADMIN_SECURITY_ENABLED:false}}

# Factory Reset Configuration (disabled by default in production)
app.admin.factory-reset.enabled=${ENABLE_FACTORY_RESET:false}
app.admin.factory-reset.token=${ADMIN_RESET_TOKEN:}

# Live Narration Configuration (disabled in production)
app.narration.enabled=${ENABLE_LIVE_NARRATION:false}

# AI Features
app.ai.enabled=${ENABLE_AI_FEATURES:false}

# Feature Flags Configuration (production defaults)
portfolio.features.auto-sync.enabled=${FEATURE_AUTO_SYNC_ENABLED:true}
portfolio.features.auto-sync.allow-manual-trigger=${FEATURE_MANUAL_SYNC_ENABLED:false}
portfolio.features.auto-sync.allow-scheduled-sync=${FEATURE_SCHEDULED_SYNC_ENABLED:true}
portfolio.features.auto-sync.max-concurrent-syncs=${FEATURE_MAX_CONCURRENT_SYNCS:1}
portfolio.features.auto-sync.max-retry-attempts=${FEATURE_MAX_RETRY_ATTEMPTS:3}

portfolio.features.ai-curation.enabled=${FEATURE_AI_CURATION_ENABLED:false}
portfolio.features.ai-curation.allow-manual-curation=${FEATURE_MANUAL_CURATION_ENABLED:false}
portfolio.features.ai-curation.respect-field-protections=${FEATURE_RESPECT_PROTECTIONS:true}
portfolio.features.ai-curation.max-analysis-length=${FEATURE_MAX_ANALYSIS_LENGTH:50000}
portfolio.features.ai-curation.skip-empty-readmes=${FEATURE_SKIP_EMPTY_READMES:true}

portfolio.features.factory-reset.enabled=${FEATURE_FACTORY_RESET_ENABLED:false}
portfolio.features.factory-reset.require-confirmation-header=${FEATURE_REQUIRE_CONFIRMATION:true}
portfolio.features.factory-reset.allow-sse-streaming=${FEATURE_ALLOW_SSE_STREAMING:true}
portfolio.features.factory-reset.rate-limit-minutes=${FEATURE_FACTORY_RESET_RATE_LIMIT:10}
portfolio.features.factory-reset.audit-all-operations=${FEATURE_AUDIT_ALL_OPERATIONS:true}

portfolio.features.admin-endpoints.enabled=${FEATURE_ADMIN_ENDPOINTS_ENABLED:true}
portfolio.features.admin-endpoints.allow-portfolio-management=${FEATURE_PORTFOLIO_MGMT_ENABLED:true}
portfolio.features.admin-endpoints.allow-source-repository-management=${FEATURE_SOURCE_REPO_MGMT_ENABLED:true}
portfolio.features.admin-endpoints.allow-sync-configuration=${FEATURE_SYNC_CONFIG_ENABLED:true}
portfolio.features.admin-endpoints.allow-completion-analysis=${FEATURE_COMPLETION_ANALYSIS_ENABLED:false}

portfolio.features.rate-limiting.enabled=${FEATURE_RATE_LIMITING_ENABLED:true}
portfolio.features.rate-limiting.admin-endpoints-per-minute=${FEATURE_ADMIN_RATE_LIMIT:30}
portfolio.features.rate-limiting.factory-reset-per-hour=${FEATURE_FACTORY_RESET_HOURLY_LIMIT:1}
portfolio.features.rate-limiting.sync-operations-per-minute=${FEATURE_SYNC_RATE_LIMIT:5}
portfolio.features.rate-limiting.ai-curation-per-minute=${FEATURE_AI_CURATION_RATE_LIMIT:10}

# Resilience4j Configuration (production settings)
# GitHub API Resilience
resilience4j.retry.instances.github.max-attempts=${GITHUB_RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.github.wait-duration=${GITHUB_RETRY_WAIT_DURATION:1000ms}
resilience4j.retry.instances.github.exponential-backoff-multiplier=${GITHUB_RETRY_BACKOFF_MULTIPLIER:2}
resilience4j.retry.instances.github.randomized-wait-factor=${GITHUB_RETRY_JITTER:0.1}
resilience4j.retry.instances.github.enable-exponential-backoff=true

resilience4j.ratelimiter.instances.github.limit-for-period=${GITHUB_RATE_LIMIT:20}
resilience4j.ratelimiter.instances.github.limit-refresh-period=${GITHUB_RATE_REFRESH_PERIOD:60s}
resilience4j.ratelimiter.instances.github.timeout-duration=${GITHUB_RATE_TIMEOUT:2s}

resilience4j.circuitbreaker.instances.github.sliding-window-size=${GITHUB_CB_WINDOW_SIZE:20}
resilience4j.circuitbreaker.instances.github.failure-rate-threshold=${GITHUB_CB_FAILURE_THRESHOLD:50}
resilience4j.circuitbreaker.instances.github.wait-duration-in-open-state=${GITHUB_CB_WAIT_DURATION:60s}
resilience4j.circuitbreaker.instances.github.permitted-number-of-calls-in-half-open-state=${GITHUB_CB_HALF_OPEN_CALLS:5}
resilience4j.circuitbreaker.instances.github.sliding-window-type=count_based

resilience4j.timelimiter.instances.github.timeout-duration=${GITHUB_TIMEOUT:15s}

# Claude AI Resilience
resilience4j.retry.instances.claude.max-attempts=${CLAUDE_RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.claude.wait-duration=${CLAUDE_RETRY_WAIT_DURATION:2s}
resilience4j.retry.instances.claude.exponential-backoff-multiplier=${CLAUDE_RETRY_BACKOFF_MULTIPLIER:2}
resilience4j.retry.instances.claude.randomized-wait-factor=${CLAUDE_RETRY_JITTER:0.15}
resilience4j.retry.instances.claude.enable-exponential-backoff=true

resilience4j.ratelimiter.instances.claude.limit-for-period=${CLAUDE_RATE_LIMIT:5}
resilience4j.ratelimiter.instances.claude.limit-refresh-period=${CLAUDE_RATE_REFRESH_PERIOD:60s}
resilience4j.ratelimiter.instances.claude.timeout-duration=${CLAUDE_RATE_TIMEOUT:3s}

resilience4j.circuitbreaker.instances.claude.sliding-window-size=${CLAUDE_CB_WINDOW_SIZE:20}
resilience4j.circuitbreaker.instances.claude.failure-rate-threshold=${CLAUDE_CB_FAILURE_THRESHOLD:50}
resilience4j.circuitbreaker.instances.claude.wait-duration-in-open-state=${CLAUDE_CB_WAIT_DURATION:120s}
resilience4j.circuitbreaker.instances.claude.permitted-number-of-calls-in-half-open-state=${CLAUDE_CB_HALF_OPEN_CALLS:3}
resilience4j.circuitbreaker.instances.claude.sliding-window-type=count_based

resilience4j.timelimiter.instances.claude.timeout-duration=${CLAUDE_TIMEOUT:45s}

# Claude Token Budget
portfolio.ai.claude.daily-token-budget=${CLAUDE_DAILY_TOKEN_BUDGET:50000}
portfolio.ai.claude.warn-threshold=${CLAUDE_WARN_THRESHOLD:0.8}
portfolio.ai.claude.budget-reset-hour=${CLAUDE_BUDGET_RESET_HOUR:0}

# Cache Configuration
portfolio.cache.completion.max-size=${COMPLETION_CACHE_MAX_SIZE:1000}
portfolio.cache.completion.expire-after-write=${COMPLETION_CACHE_EXPIRE:PT30M}
portfolio.cache.projects.max-size=${PROJECTS_CACHE_MAX_SIZE:500}
portfolio.cache.projects.expire-after-write=${PROJECTS_CACHE_EXPIRE:PT15M}

# Caffeine Cache
spring.cache.caffeine.spec=maximumSize=500,expireAfterWrite=600s

# Server Configuration - Compression
server.compression.enabled=true
server.compression.mime-types=application/json,text/html,text/plain,application/xml,text/css,application/javascript

# Server Error Configuration
server.error.include-message=never
server.error.include-stacktrace=never
server.error.include-exception=false

# Disable mail health check that causes 503
management.health.mail.enabled=false

# Keep-Alive Configuration (prevents Render sleep)
# Enable keep-alive service only in production
app.keepalive.enabled=${KEEPALIVE_ENABLED:true}
# URL to ping (should be the health endpoint of this same service)
app.keepalive.url=${KEEPALIVE_URL:https://portfolio-spring-gmat.onrender.com/api/health}
# Interval in milliseconds (14 minutes = 840000ms, just under Render's 15-minute timeout)
app.keepalive.interval=${KEEPALIVE_INTERVAL:840000}

# Request timeout settings to handle slow wake-ups
server.tomcat.connection-timeout=60000
spring.mvc.async.request-timeout=60000
